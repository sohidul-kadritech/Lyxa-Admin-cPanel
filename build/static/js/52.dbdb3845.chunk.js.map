{"version":3,"file":"static/js/52.dbdb3845.chunk.js","mappings":"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","sources":["components/Graph.js","components/GraphInfo.js"],"sourcesContent":["import React from \"react\";\nimport Flatpickr from \"react-flatpickr\";\nimport Select from \"react-select\";\nimport { Row, Col, Card, CardBody, Spinner } from \"reactstrap\";\nimport { graphFilterOptions, monthOptions } from \"../assets/staticData\";\nimport { Bar } from \"react-chartjs-2\";\n\nconst Graph = ({\n  filterType,\n  startDate,\n  endDate,\n  year,\n  type,\n  startDateValue,\n  endDateValue,\n  chartData = {},\n  isLoading,\n  yearValue,\n  graphType,\n  getMonth,\n  month,\n}) => {\n  const data = {\n    labels: chartData.labels,\n    datasets: [\n      {\n        label: \"Analytics\",\n        backgroundColor: \"#02a499\",\n        borderColor: \"#02a499\",\n        borderWidth: 1,\n        hoverBackgroundColor: \"#02a499\",\n        hoverBorderColor: \"#02a499\",\n        data: chartData?.series ?? [],\n      },\n    ],\n  };\n\n  const option = {\n    tootlbar: {\n      show: false,\n    },\n    low: 0,\n    tooltips: {\n      callbacks: {\n        label: function (tooltipItem, data) {\n          let dataset = data.datasets[tooltipItem.datasetIndex];\n          // let meta = dataset._meta[Object.keys(dataset._meta)[0]];\n          // let total = meta.total;\n          let currentValue = dataset.data[tooltipItem.index];\n          // var percentage = parseFloat((currentValue / total * 100).toFixed(1));\n          return ` ${graphType}s - ${currentValue}`;\n        },\n        title: function (tooltipItem, data) {\n          return ` ${\n            type.value === \"normal\" || type.value === \"month\" ? \"Date\" : \"Month\"\n          } - ${data.labels[tooltipItem[0].index]}`;\n        },\n      },\n    },\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n            stepSize: 5,\n            callback: function (value) {\n              if (value % 1 === 0) {\n                return value;\n              }\n            },\n          },\n        },\n      ],\n    },\n  };\n  return (\n    <React.Fragment>\n      <Card>\n        <CardBody>\n          <div className=\"d-flex justify-content-between align-items-center\">\n            <h4\n              className=\"card-title mb-4 text-capitalize\"\n              style={{ width: \"140px\" }}\n            >\n              {`${graphType}s Graph`}\n            </h4>\n            <Row style={{ flex: \"1\" }}>\n              <Col lg={4}>\n                <div className=\"mb-4\">\n                  <label className=\"control-label\">Filter By</label>\n                  <Select\n                    palceholder=\"Select Status\"\n                    options={graphFilterOptions}\n                    classNamePrefix=\"select2-selection\"\n                    value={type}\n                    onChange={(e) => filterType(e)}\n                  />\n                </div>\n              </Col>\n              <Col lg={8}>\n                {type.value === \"year\" ? (\n                  <div>\n                    <label>Year</label>\n                    <input\n                      type=\"number\"\n                      className=\"form-control\"\n                      placeholder=\"Enter year\"\n                      min={2021}\n                      max={new Date().getFullYear()}\n                      value={yearValue}\n                      onChange={(e) => year(e.target.value)}\n                    />\n                  </div>\n                ) : type.value === \"month\" ? (\n                  <Row>\n                    <Col md={6}>\n                      <div className=\"\">\n                        <label className=\"control-label\">Select Month</label>\n                        <Select\n                          palceholder=\"Select Status\"\n                          options={monthOptions}\n                          classNamePrefix=\"select2-selection\"\n                          value={month}\n                          onChange={getMonth}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                ) : (\n                  <div className=\"d-flex my-3 my-md-0 \">\n                    <div className=\" w-100\">\n                      <label>Start Date</label>\n                      <div className=\"form-group mb-0 w-100\">\n                        <Flatpickr\n                          className=\"form-control d-block\"\n                          id=\"startDate\"\n                          placeholder=\"Start Date\"\n                          value={startDateValue}\n                          onChange={(selectedDates, dateStr, instance) =>\n                            startDate(dateStr)\n                          }\n                          options={{\n                            altInput: true,\n                            altFormat: \"F j, Y\",\n                            dateFormat: \"Y-m-d\",\n                          }}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"ms-2 w-100\">\n                      <label>End Date</label>\n                      <div className=\"form-group mb-0\">\n                        <Flatpickr\n                          className=\"form-control w-100\"\n                          id=\"endDate\"\n                          placeholder=\"Select End Date\"\n                          value={endDateValue}\n                          onChange={(selectedDates, dateStr, instance) =>\n                            endDate(dateStr)\n                          }\n                          options={{\n                            altInput: true,\n                            altFormat: \"F j, Y\",\n                            dateFormat: \"Y-m-d\",\n                          }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </Col>\n            </Row>\n          </div>\n\n          <Row>\n            <Col>\n              <div>\n                {isLoading ? (\n                  <Spinner animation=\"border\" color=\"success\" />\n                ) : (\n                  <Bar width={600} height={245} data={data} options={option} />\n                )}\n              </div>\n            </Col>\n          </Row>\n        </CardBody>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Graph;\n","import moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  ADMIN_DASHBOARD_EARNING_GRAPH,\n  ADMIN_DASHBOARD_ORDER_GRAPH,\n  ADMIN_DASHBOARD_USERS_GRAPH,\n  SELLER_DASHBOARD_EARNING_GRAPH,\n  SELLER_DASHBOARD_ORDER_GRAPH,\n  SHOP_DASHBOARD_EARNING_GRAPH,\n  SHOP_DASHBOARD_ORDER_GRAPH,\n} from \"../network/Api\";\nimport requestApi from \"../network/httpRequest\";\nimport Graph from \"./Graph\";\n\nconst GraphInfo = ({ graphType }) => {\n  const initStartDate = moment().startOf(\"month\").format(\"YYYY-MM-DD\");\n  const initEndDate = moment().endOf(\"month\").format(\"YYYY-MM-DD\");\n\n  const { account_type, _id: Id } = JSON.parse(localStorage.getItem(\"admin\"));\n  const [filterType, setFilterType] = useState({\n    label: \"Daily\",\n    value: \"normal\",\n  });\n  const [year, setYear] = useState(new Date().getFullYear());\n  const [startDate, setStartDate] = useState(initStartDate);\n  const [endDate, setEndDate] = useState(initEndDate);\n  const [data, setData] = useState([]);\n  const [chartData, setChartData] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [month, setMonth] = useState({ label: \"January\", value: \"1\" });\n  const options = { day: \"numeric\", month: \"short\" };\n\n  useEffect(async () => {\n    if ((filterType && year) || startDate || endDate || month) {\n      setIsLoading(true);\n      try {\n        const { data } = await requestApi().request(getApi(graphType), {\n          params: {\n            startDate,\n            endDate,\n            type: filterType.value === \"month\" ? \"normal\" : filterType.value,\n            year,\n          },\n        });\n\n        if (data) {\n          setIsLoading(false);\n          if (data.status) {\n            const { info } = data.data;\n            setData(info);\n          }\n        }\n      } catch (e) {\n        console.log(e.message);\n        setIsLoading(false);\n        setIsLoading(false);\n      }\n    }\n  }, [filterType, year, startDate, endDate]);\n\n  const getApi = (graphType) => {\n    if (graphType === \"order\") {\n      return account_type === \"admin\"\n        ? ADMIN_DASHBOARD_ORDER_GRAPH\n        : account_type === \"seller\"\n        ? SELLER_DASHBOARD_ORDER_GRAPH\n        : SHOP_DASHBOARD_ORDER_GRAPH;\n    } else if (graphType === \"user\") {\n      return ADMIN_DASHBOARD_USERS_GRAPH;\n    } else if (graphType === \"earning\") {\n      return account_type === \"admin\"\n        ? ADMIN_DASHBOARD_EARNING_GRAPH\n        : account_type === \"seller\"\n        ? SELLER_DASHBOARD_EARNING_GRAPH\n        : SHOP_DASHBOARD_EARNING_GRAPH;\n    }\n  };\n\n  useEffect(() => {\n    if (data.length > 0) {\n      const labelsData = data?.map((item, index) =>\n        item.date\n          ? new Date(item?.date).toLocaleDateString(\"en-GB\", options)\n          : moment(item?.month, \"M\").format(\"MMMM\")\n      );\n      const seriesData = data?.map((item) => item[graphType]);\n      if (labelsData && seriesData) {\n        const chartInfo = {\n          labels: labelsData,\n          series: seriesData,\n        };\n        setChartData(chartInfo);\n      }\n    }\n    return;\n  }, [data]);\n\n  // GET SELECTED MONTH START DATE AND END DATE\n\n  const getSelectMonthDate = ({ value }) => {\n    let year = new Date().getFullYear();\n\n    var startDate = moment([year, value - 1]);\n    var endDate = moment(startDate).endOf(\"month\");\n\n    setStartDate(startDate.format(\"YYYY-MM-DD\"));\n    setEndDate(endDate.format(\"YYYY-MM-DD\"));\n  };\n\n  const updateFilterType = (type) => {\n    setFilterType(type);\n    if (type.value === \"normal\") {\n      setStartDate(initStartDate);\n      setEndDate(initEndDate);\n    } else if (type.value === \"month\") {\n      getSelectMonthDate(month);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Graph\n        filterType={(type) => updateFilterType(type)}\n        startDate={(date) => setStartDate(date)}\n        endDate={(date) => setEndDate(date)}\n        year={(year) => setYear(year)}\n        type={filterType}\n        startDateValue={startDate}\n        endDateValue={endDate}\n        chartData={chartData}\n        isLoading={isLoading}\n        yearValue={year}\n        graphType={graphType}\n        getMonth={(month) => {\n          getSelectMonthDate(month);\n          setMonth(month);\n        }}\n        month={month}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default GraphInfo;\n"],"names":["filterType","startDate","endDate","year","type","startDateValue","endDateValue","chartData","isLoading","yearValue","graphType","getMonth","month","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","series","option","tootlbar","show","low","tooltips","callbacks","tooltipItem","currentValue","datasetIndex","index","title","value","scales","yAxes","ticks","beginAtZero","stepSize","callback","Card","CardBody","className","style","width","Row","flex","Col","lg","palceholder","options","graphFilterOptions","classNamePrefix","onChange","e","placeholder","min","max","Date","getFullYear","target","md","monthOptions","id","selectedDates","dateStr","instance","altInput","altFormat","dateFormat","Spinner","animation","color","height","initStartDate","moment","startOf","format","initEndDate","endOf","JSON","parse","localStorage","getItem","account_type","_id","useState","setFilterType","setYear","setStartDate","setEndDate","setData","setChartData","setIsLoading","setMonth","day","useEffect","requestApi","request","getApi","params","status","info","console","log","message","ADMIN_DASHBOARD_ORDER_GRAPH","SELLER_DASHBOARD_ORDER_GRAPH","SHOP_DASHBOARD_ORDER_GRAPH","ADMIN_DASHBOARD_USERS_GRAPH","ADMIN_DASHBOARD_EARNING_GRAPH","SELLER_DASHBOARD_EARNING_GRAPH","SHOP_DASHBOARD_EARNING_GRAPH","length","labelsData","map","item","date","toLocaleDateString","seriesData","getSelectMonthDate","updateFilterType"],"sourceRoot":""}